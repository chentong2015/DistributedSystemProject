package core;

// 框架: 一组用于在特定平台或多个平台上开发代码的类库
// 技术栈: 一组技术，通常包括(多个)框架
public class ArchitectCore {

    // 互联网架构师全教程 https://mikechen.cc/
    // 0. 系统设计
    // 1. 多线程和高并发
    // 2. 分布式和负载均衡 / 大流量场景下性能优化、系统压测、限流降级
    // 3. 数据库调优
    // 4. Redis / Serverless微服务框架
    // 5. 消息中间件
    // 6. 容器技术
    // 7. 大数据数据处理
    // 8. Cloud云计算 / Hadoop, Spark

    // 架构师的视角 https://icyfenix.cn/exploration/projects/
    // 1. 服务架构
    // 2. 架构师的视角
    // 3. 分布式的基石
    // 4. 基础设施Infrastructure
    // 5. 技术方法论
    // 6. 部署

    // ASP 4层分层架构:
    // 1. 表示层: 将数据传递到系统的其他地方
    //           1.1 输入模型：输入数据被封装在HTTP请求中，输入数据代表提交给服务器处理的数据
    //           1.2 视图模型：控制器选择要使用的HTML模板，将模板和数据传递给试图引擎进行渲染，生成供浏览器使用的标记
    // 2. 应用层: 协调表示层触发的任何任务，执行所以特定于UI的数据转换
    //           按照用户的视角将业务过程抽象出来，并将过程映射到应用程序的后端
    // 3. 领域层: 在表示层中可以任意重复的特定业务的核心逻辑，处理业务规则和任务
    //           领域逻辑提供的代码和工作流是针对业务领域的，而不是针对具体的应用程序功能
    // 4. 基础结构层: 和使用的具体技术有关
    //              数据持久化(数据访问层)，外部Web服务，日志记录，跟踪，电子邮件，缓存...
}
